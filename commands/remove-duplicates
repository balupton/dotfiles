#!/usr/bin/env bash

function remove_duplicates() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Compare files with the same filenames from multiple directories, if they share the same checksum remove them.

			USAGE:
			remove-duplicates [...options] -- <source-path> ...<duplicate-path>
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			__split --target={option_paths} --no-zero-length --invoke -- \
				fs-path --absolute -- "$@"
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# ensure paths
	if [[ ${#option_paths[@]} -lt 2 ]]; then
		help 'Need at least two directories to compare files within.'
	fi

	local source_dir_path="${option_paths[0]}" filename \
		alt_paths=("${option_paths[@]:1}") \
		alt_dir_path alt_file_path source_file_path

	# =====================================
	# Action

	# cycle through source source files
	if [[ ! -d $source_dir_path ]]; then
		help "$source_dir_path was provided, but it is not a valid directory."
	fi
	for alt_dir_path in "${alt_paths[@]}"; do
		if [[ ! -d $alt_dir_path ]]; then
			help "$alt_dir_path was provided, but it is not a valid directory."
		fi
		for alt_file_path in "$alt_dir_path"/*; do
			filename="$(basename -- "$alt_file_path")"

			# check it also exists in alt location
			source_file_path="$source_dir_path/$filename"
			if [[ ! -f $source_file_path ]]; then
				continue
			fi

			# compare and possibly remove
			if is-same --comparisons=checksum -- "$source_file_path" "$alt_file_path"; then
				/usr/bin/trash "$alt_file_path" # doesn't support -- ...<file>
				echo-style --green='same,' --green+bold=' removed: ' --code="$alt_file_path"
			else
				echo-style --red='different,' --red+bold=' kept'
			fi
		done
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	remove_duplicates "$@"
fi
