#!/usr/bin/env bash

function discourse_setup() (
	# Load Dorothy's sensible defaults
	eval "$(curl -fsSL 'https://raw.githubusercontent.com/bevry/dorothy/HEAD/sources/bash.bash')"

	# Receive arguments from caller
	local GIT_SSH_KEY="${GIT_SSH_KEY-}" GIT_SSH_PASS="${GIT_SSH_PASS-}" GIT_REMOTE="${GIT_REMOTE-}" GIT_BRANCH="${GIT_BRANCH-}" CONTAINER="${CONTAINER-}"
	if [[ -z "$GIT_SSH_KEY" || -z "$GIT_SSH_PASS" || -z "$GIT_REMOTE" ]]; then
		__print_lines '[discourse-setup] is to be run via [commands/discourse]' >/dev/stderr
		return 1
	fi

	__print_lines 'Configuring dependencies...'
	# Remove old dependencies
	sudo apt-get remove -y certbot
	# Update existing dependencies
	sudo apt-get update -y
	sudo apt-get upgrade -y
	# Add new dependencies
	sudo apt-get install -y wget git
	# Purge unused dependencies
	sudo apt-get autoremove -y

	# SSH Keys
	__print_lines 'Configuring SSH keys...'
	# Ensure essentials
	__mkdirp "$HOME/.ssh"
	# Replace known hosts with GitHub's SSH keys
	ssh-keyscan -t rsa github.com >"$HOME/.ssh/known_hosts"
	# Load our SSH Agent
	eval "$(ssh-agent -s)"
	# Save Configuration File
	if [[ ! -e "$HOME/.ssh/config" ]]; then
		cat <<-EOF >"$HOME/.ssh/config"
			# Configuration
			UserKnownHostsFile ~/.ssh/known_hosts
			IgnoreUnknown UseKeychain,AddKeysToAgent,IdentitiesOnly
			UseKeychain yes
			AddKeysToAgent yes

			# Fallback
			IdentityFile ~/.ssh/$GIT_SSH_KEY
		EOF
	fi
	# Fix Permissions
	chmod --recursive a-xrw,u+Xrw -- "$HOME/.ssh" # non-dorothy environment, only linux
	# Load our SSH Key: https://stackoverflow.com/a/52671286/130638
	if [[ -n "${GIT_SSH_PASS-}" ]]; then
		ssh_stdin_pass_helper="$HOME/ssh_stdin_password.bash"
		cat <<-EOF >"$ssh_stdin_pass_helper"
			#!/usr/bin/env bash
			read secret
			echo \$secret
		EOF
		chmod +x -- "$ssh_stdin_pass_helper" # non-dorothy environment, only linux

		__print_lines 'Adding the SSH keys...'
		DISPLAY=:0 SSH_ASKPASS="$ssh_stdin_pass_helper" ssh-add "$HOME/.ssh/$GIT_SSH_KEY" <<<"$GIT_SSH_PASS"
	elif [[ -n "${GIT_SSH_KEY-}" ]]; then
		ssh-add "$HOME/.ssh/$GIT_SSH_KEY"
	fi

	# Install certbot
	# if __command_missing certbot; then
	# 	# fuse necessary due to: error: system does not fully support snapd: The "fuse" filesystem is required on this system but not available. Please try to install the fuse package.
	# 	__print_lines 'Configuring snap...'
	# 	sudo apt-get install -y fuse snapd

	# 	__print_lines 'Configuring certbot...'
	# 	sudo snap install --classic certbot
	# 	sudo ln -s /snap/bin/certbot /usr/bin/certbot
	# fi

	# Install docker
	if __command_missing docker; then
		__print_lines 'Docker is missing, install it via [setup-util-docker] by installing Dorothy [dorothy.bevry.me]...' >/dev/stderr
		return 1
	fi

	# Install discourse
	__print_lines 'Configuring discourse...'
	if [[ ! -e /var/discourse ]]; then
		sudo mkdir -p -m 'a-xrw,u+Xrw' -- /var/discourse
		sudo chown "$USER:" -- /var/discourse
		cd /var/discourse
		git init
		git config pull.ff only
		git remote add origin 'https://github.com/discourse/discourse_docker.git'
		git fetch origin
		git checkout main
		git pull origin main --force --ff-only
	else
		cd /var/discourse
		git pull origin main --force --ff-only
	fi

	# Install configuration
	__print_lines 'Configuring instance...'
	if [[ ! -e /var/discourse/containers/.git ]]; then
		rm -rf -- /var/discourse/containers
		__mkdirp /var/discourse/containers
		cd /var/discourse/containers
		git init
		git config pull.ff only
		git remote rm origin 2>/dev/null || : # don't care if doesn't exist, and remove to ensure desired URL is applied
		git remote add --fetch origin "$GIT_REMOTE"
		git checkout "$GIT_BRANCH"
		git pull origin "$GIT_BRANCH"
	else
		cd /var/discourse/containers
		git fetch "$GIT_REMOTE"
		git checkout "$GIT_BRANCH"
		git pull origin "$GIT_BRANCH"
	fi
	if [[ ! -e "/var/discourse/containers/$CONTAINER.yml" ]]; then
		vim -- '/var/discourse/containers/app.yml'
	fi
	if [[ -e "/var/discourse/containers/$CONTAINER.yml" ]]; then
		ln -sfF -- "/var/discourse/containers/$CONTAINER.yml" '/var/discourse/containers/app.yml'
	fi
	if [[ -e "/var/discourse/containers/$CONTAINER.key" ]]; then
		__mkdirp /var/discourse/shared/standalone/ssl
		# symlink doesn't work
		cp -f -- "/var/discourse/containers/$CONTAINER.key" '/var/discourse/shared/standalone/ssl/ssl.key'
	fi
	if [[ -e "/var/discourse/containers/$CONTAINER.crt" ]]; then
		__mkdirp /var/discourse/shared/standalone/ssl
		# symlink doesn't work
		cp -f -- "/var/discourse/containers/$CONTAINER.crt" '/var/discourse/shared/standalone/ssl/ssl.crt'
	fi

	# Trim unused/style images to free up space
	__print_lines 'Pruning docker...'
	docker ps -a
	docker image list
	docker image prune --force --all --filter 'until=28h'
	docker image list

	# Build the app
	__print_lines 'Building instance...'
	sudo apt-get install -y tmux
	tmux -c '/var/discourse/launcher rebuild app; exit'

	# # Cron
	# __print_lines 'Configuring cron...'
	# # Always update cron job file with the latest
	# local discourse_cron_script
	# discourse_cron_script="$HOME/discourse_cron.bash"
	# cat <<-EOF >"$discourse_cron_script"
	# 	#!/usr/bin/env bash
	# 	set -Eeuo pipefail
	# 	docker image prune --force --all --filter "until=28h"
	# 	cd /var/discourse
	# 	git pull origin "\$(git rev-parse --abbrev-ref HEAD)"
	# 	/var/discourse/launcher rebuild app
	# EOF
	# chmod +x -- "$discourse_cron_script"
	# # Check if the cron job file is actually used
	# while ! (crontab -l | grep --quiet --fixed-strings --regexp="$discourse_cron_script"); do
	# 	cat <<-EOF
	# 		CRON JOB DOES NOT EXIST FOR UPGRADING DISCOURSE
	# 		COPY THE BELOW INTO THE PROMPT AND SAVE

	# 		# at midnight each day, upgrade the discourse forum
	# 		0 0 * * * $discourse_cron_script
	# 	EOF
	# 	read -r -n 1 -p 'ARE YOU READY?'
	# 	env EDITOR='/bin/nano' crontab -e
	# done
)

# always fire
discourse_setup "$@"
