#!/usr/bin/env bash

function boundation_ordered() (
	source "$DOROTHY/sources/bash.bash"

	# if the secrets aren't provided, fetch them and reload
	if [[ -z ${GITHUB_ACCESS_TOKEN-} ]]; then
		bevry-auth -- "$0" "$@"
		return
	fi

	if [[ $# -ne 0 ]]; then
		__print_error 'You passed arguments. How do you expect them to work on multiple boundation-all calls. Modify this file instead.'
		return 1
	fi

	local slugs=(
		# assert-helpers
		# bevry/ansi
		# bevry/errlop
		# bevry/assert-helpers

		# editions
		# bevry/version-clean
		# bevry/version-compare
		# bevry/version-range
		bevry/editions

		# ambi/eachr/extendr
		bevry/typechecker

		# taskgroup
		bevry/ambi
		bevry/eachr
		bevry/extendr
		bevry/unbounded

		# taskgroup dev deps
		bevry/extract-opts
		bevry/safefs
		bevry/safeps

		# kava
		bevry/taskgroup
		bevry/event-emitter-grouped
		bevry/kava

		# istextorbinary
		bevry/binaryextensions
		bevry/textextensions
		bevry/istextorbinary

		# fs-*
		bevry/fs-accessible
		bevry/fs-readable
		bevry/fs-writable
		bevry/fs-executable
		bevry/fs-list
		bevry/fs-read
		bevry/fs-mkdirp
		bevry/fs-write
		bevry/fs-remove
		bevry/fs-rmdir
		bevry/fs-unlink
		bevry/json
	)

	local slug_args=() skip_args=()
	__split --target={slug_args} --no-zero-length --invoke -- \
		echo-lines --prefix='--slug=' -- "${slugs[@]}"
	__split --target={skip_args} --no-zero-length --invoke -- \
		echo-lines --prefix='--skip=' -- "${slugs[@]}"
	boundation-all "${slug_args[@]}"
	boundation-all --zero-deps "${skip_args[@]}"
	boundation-all --has-deps "${skip_args[@]}"
	# the ideal would be to implement:
	# boundation-all "${slug_args[@]}" "$@" -- --username=bevry --zero-deps "${skip_args[@]}" "$@" -- --username=bevry --has-deps "${skip_args[@]}" "$@"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	boundation_ordered "$@"
fi
