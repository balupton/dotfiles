#!/usr/bin/env bash

function generate_subtitles() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Generate subtitles for media files.

			USAGE:
			generate-sbutitles [...options] [...<path> [-- ...<path>]]

			OPTIONS:
			[...<path> [-- ...<path>]]
			    The paths to look for media files within. Looking will be deep, looking in subdirectories.
			    If no paths are provided, the current working directory will be used.
			--overwrite
			    If enabled, will overwrite existing subtitle files.
			--quiet
			    Output less information.

			DEPENDENCIES:
			whisper
		EOF
		if [[ $# -ne 0 ]]; then
			__print_error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='' option_overwrite='' option_paths=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*) __flag --source={item} --target={option_quiet} --non-affirmative ;;
		'--no-quiet'* | '--quiet'*) __flag --source={item} --target={option_quiet} --affirmative ;;
		'--no-overwrite'* | '--overwrite'*) __flag --source={item} --target={option_overwrite} --affirmative ;;
		'--')
			option_paths+=("$item" "$@")
			shift $#
			break
			;;
		--*) __unrecognised_flag "$item" || return ;;
		*) option_paths+=("$item") ;;
		esac
	done

	if [[ -z $option_overwrite ]]; then
		option_overwrite='no'
	fi

	if [[ -z $option_quiet ]]; then
		option_quiet='yes'
	fi

	if [[ ${#option_paths[@]} -eq 0 ]]; then
		option_paths+=('.')
	fi

	# =====================================
	# Helpers

	# --language English
	local whisper_cmd=(whisper --model turbo -f srt --verbose True)
	if is-mac; then
		whisper_cmd+=(--fp16 False)
	fi

	function __transcribe {
		local filepath="$1" filepath_no_extension dirpath
		filepath="$(fs-path --absolute -- "$filepath")" || return
		if [[ $option_overwrite == 'no' ]]; then
			# check if the subtitle file already exists, only do --no-extension, as it could have a . in its name, like [A vs. B]
			filepath_no_extension="$(fs-path --no-extension -- "$filepath")" || return
			if [[ -f "$filepath_no_extension.srt" ]]; then
				return 0
			fi
		fi
		dirpath="$(fs-path --parents -- "$filepath")" || return
		(
			cd "$dirpath" || return
			eval-helper --wrap --quiet="$option_quiet" --revolving-max-lines=1 -- \
				"${whisper_cmd[@]}" "$filepath" || return
		) || return
	}

	local option_paths filepaths
	for path in "${option_paths[@]}"; do
		if [[ -d $path ]]; then
			filepaths=("$path"/**/*.{mp4,mkv,webm,avi,flv,wmv,mov,mpg,mpeg,m4v,3gp,3g2,webp,mp3,m4a,ogg,wav,flac,opus})
			for filepath in "${filepaths[@]}"; do
				__transcribe "$filepath"
			done
		elif [[ -f $path ]]; then
			__transcribe "$path"
		else
			__print_error "The path [$path] is not a file or directory."
		fi
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	generate_subtitles "$@"
fi
